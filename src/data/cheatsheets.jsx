export const categories = [
  {
    id: "git",
    title: "Git",
    icon: "git-branch",
    cheatSheets: [
      {
        id: "git-basics",
        title: "Git Basics",
        icon: "git-commit",
        description: "Common Git commands for everyday use",
        snippets: [
          {
            id: "git-init",
            title: "Initialize a repository",
            description: "Create a new git repository in the current directory",
            code: "git init",
            language: "bash",
          },
          {
            id: "git-clone",
            title: "Clone a repository",
            description: "Clone a repository from a remote URL",
            code: "git clone https://github.com/username/repository.git",
            language: "bash",
          },
          {
            id: "git-add",
            title: "Stage changes",
            description: "Add files to the staging area",
            code: "git add <file>\ngit add .",
            language: "bash",
          },
          {
            id: "git-commit",
            title: "Commit changes",
            description: "Commit staged changes with a message",
            code: 'git commit -m "Your message here"',
            language: "bash",
          },
          {
            id: "git-status",
            title: "Check status",
            description: "View the status of your working directory",
            code: "git status",
            language: "bash",
          },
        ],
      },
      {
        id: "git-branching",
        title: "Git Branching",
        icon: "git-branch",
        description: "Commands for working with branches",
        snippets: [
          {
            id: "git-branch",
            title: "List branches",
            description: "List all local branches",
            code: "git branch",
            language: "bash",
          },
          {
            id: "git-branch-create",
            title: "Create a branch",
            description: "Create a new branch",
            code: "git branch <branch-name>",
            language: "bash",
          },
          {
            id: "git-checkout",
            title: "Switch branches",
            description: "Switch to a different branch",
            code: "git checkout <branch-name>",
            language: "bash",
          },
          {
            id: "git-checkout-new",
            title: "Create and switch",
            description: "Create a new branch and switch to it",
            code: "git checkout -b <branch-name>",
            language: "bash",
          },
          {
            id: "git-merge",
            title: "Merge branches",
            description:
              "Merge changes from one branch into your current branch",
            code: "git merge <branch-name>",
            language: "bash",
          },
        ],
      },
      {
        id: "git-remote",
        title: "Git Remote",
        icon: "git-remote",
        description: "Commands for working with remote repositories",
        snippets: [
          {
            id: "git-remote-add",
            title: "Add a remote",
            description: "Add a new remote repository",
            code: "git remote add origin https://github.com/username/repository.git",
            language: "bash",
          },
          {
            id: "git-remote-view",
            title: "View remotes",
            description: "List all remote repositories",
            code: "git remote -v",
            language: "bash",
          },
          {
            id: "git-fetch",
            title: "Fetch changes",
            description: "Fetch changes from a remote repository",
            code: "git fetch origin",
            language: "bash",
          },
          {
            id: "git-push",
            title: "Push changes",
            description: "Push changes to a remote repository",
            code: "git push origin <branch-name>",
            language: "bash",
          },
          {
            id: "git-pull",
            title: "Pull changes",
            description: "Pull changes from a remote repository",
            code: "git pull origin <branch-name>",
            language: "bash",
          },
        ],
      },
      {
        id: "git-log",
        title: "Git Log",
        icon: "git-log",
        description: "Commands for viewing commit history",
        snippets: [
          {
            id: "git-log-basic",
            title: "View log",
            description: "View the commit history",
            code: "git log",
            language: "bash",
          },
          {
            id: "git-log-oneline",
            title: "View log oneline",
            description: "View the commit history in a single line per commit",
            code: "git log --oneline",
            language: "bash",
          },
          {
            id: "git-log-graph",
            title: "View log graph",
            description: "View the commit history as a graph",
            code: "git log --graph",
            language: "bash",
          },
          {
            id: "git-log-follow",
            title: "View log follow",
            description: "View the commit history for a specific file",
            code: "git log --follow <file>",
            language: "bash",
          },
          {
            id: "git-log-author",
            title: "View log by author",
            description: "View the commit history by a specific author",
            code: 'git log --author="Author Name"',
            language: "bash",
          },
        ],
      },
      {
        id: "git-diff",
        title: "Git Diff",
        icon: "git-diff",
        description: "Commands for viewing changes",
        snippets: [
          {
            id: "git-diff-basic",
            title: "View changes",
            description: "View changes in the working directory",
            code: "git diff",
            language: "bash",
          },
          {
            id: "git-diff-staged",
            title: "View staged changes",
            description: "View changes in the staging area",
            code: "git diff --staged",
            language: "bash",
          },
          {
            id: "git-diff-commit",
            title: "View commit changes",
            description: "View changes introduced by a specific commit",
            code: "git diff <commit>",
            language: "bash",
          },
          {
            id: "git-diff-branch",
            title: "View branch changes",
            description: "View changes between two branches",
            code: "git diff <branch1>..<branch2>",
            language: "bash",
          },
          {
            id: "git-diff-file",
            title: "View file changes",
            description: "View changes for a specific file",
            code: "git diff <file>",
            language: "bash",
          },
        ],
      },
      {
        id: "git-reset",
        title: "Git Reset",
        icon: "git-reset",
        description: "Commands for resetting changes",
        snippets: [
          {
            id: "git-reset-soft",
            title: "Soft reset",
            description:
              "Reset the HEAD to a specific commit, keeping changes in the staging area",
            code: "git reset --soft <commit>",
            language: "bash",
          },
          {
            id: "git-reset-mixed",
            title: "Mixed reset",
            description:
              "Reset the HEAD to a specific commit, keeping changes in the working directory",
            code: "git reset --mixed <commit>",
            language: "bash",
          },
          {
            id: "git-reset-hard",
            title: "Hard reset",
            description:
              "Reset the HEAD to a specific commit, discarding all changes",
            code: "git reset --hard <commit>",
            language: "bash",
          },
          {
            id: "git-reset-file",
            title: "Reset a file",
            description: "Reset a specific file to a specific commit",
            code: "git reset <commit> <file>",
            language: "bash",
          },
          {
            id: "git-reset-patch",
            title: "Patch reset",
            description: "Interactively reset changes",
            code: "git reset --patch <commit>",
            language: "bash",
          },
        ],
      },
      {
        id: "git-stash",
        title: "Git Stash",
        icon: "git-stash",
        description: "Commands for stashing changes",
        snippets: [
          {
            id: "git-stash-save",
            title: "Stash changes",
            description: "Stash changes in the working directory",
            code: "git stash",
            language: "bash",
          },
          {
            id: "git-stash-list",
            title: "List stashes",
            description: "List all stashed changes",
            code: "git stash list",
            language: "bash",
          },
          {
            id: "git-stash-apply",
            title: "Apply stash",
            description: "Apply the most recent stash",
            code: "git stash apply",
            language: "bash",
          },
          {
            id: "git-stash-apply-specific",
            title: "Apply specific stash",
            description: "Apply a specific stash",
            code: "git stash apply stash@{n}",
            language: "bash",
          },
          {
            id: "git-stash-drop",
            title: "Drop stash",
            description: "Drop the most recent stash",
            code: "git stash drop",
            language: "bash",
          },
        ],
      },
    ],
  },
  {
    id: "regex",
    title: "Regular Expressions",
    icon: "regex",
    cheatSheets: [
      {
        id: "regex-basics",
        title: "Regex Basics",
        icon: "regex-basic",
        description: "Basic regular expression patterns",
        snippets: [
          {
            id: "regex-literal",
            title: "Literal Match",
            description: "Match a literal string",
            code: "/abc/",
            language: "regex",
          },
          {
            id: "regex-any-char",
            title: "Any Character",
            description: "Match any single character",
            code: "/./",
            language: "regex",
          },
          {
            id: "regex-digit",
            title: "Digit",
            description: "Match any digit",
            code: "/\\d/",
            language: "regex",
          },
          {
            id: "regex-non-digit",
            title: "Non-Digit",
            description: "Match any non-digit",
            code: "/\\D/",
            language: "regex",
          },
          {
            id: "regex-word-char",
            title: "Word Character",
            description: "Match any word character",
            code: "/\\w/",
            language: "regex",
          },
        ],
      },
      {
        id: "regex-character-classes",
        title: "Character Classes",
        icon: "regex-class",
        description: "Character classes in regular expressions",
        snippets: [
          {
            id: "regex-char-set",
            title: "Character Set",
            description: "Match any character in the set",
            code: "/[abc]/",
            language: "regex",
          },
          {
            id: "regex-negated-char-set",
            title: "Negated Character Set",
            description: "Match any character not in the set",
            code: "/[^abc]/",
            language: "regex",
          },
          {
            id: "regex-range",
            title: "Range",
            description: "Match any character in the range",
            code: "/[a-z]/",
            language: "regex",
          },
          {
            id: "regex-negated-range",
            title: "Negated Range",
            description: "Match any character not in the range",
            code: "/[^a-z]/",
            language: "regex",
          },
          {
            id: "regex-union",
            title: "Union",
            description: "Match any character in either set",
            code: "/[a-c[x-z]]/",
            language: "regex",
          },
        ],
      },
      {
        id: "regex-quantifiers",
        title: "Quantifiers",
        icon: "regex-quantifier",
        description: "Quantifiers in regular expressions",
        snippets: [
          {
            id: "regex-star",
            title: "Star",
            description: "Match zero or more occurrences",
            code: "/a*/",
            language: "regex",
          },
          {
            id: "regex-plus",
            title: "Plus",
            description: "Match one or more occurrences",
            code: "/a+/",
            language: "regex",
          },
          {
            id: "regex-question",
            title: "Question Mark",
            description: "Match zero or one occurrence",
            code: "/a?/",
            language: "regex",
          },
          {
            id: "regex-braces",
            title: "Braces",
            description: "Match a specific number of occurrences",
            code: "/a{3}/",
            language: "regex",
          },
          {
            id: "regex-braces-range",
            title: "Braces Range",
            description: "Match a range of occurrences",
            code: "/a{2,4}/",
            language: "regex",
          },
        ],
      },
      {
        id: "regex-anchors",
        title: "Anchors",
        icon: "regex-anchor",
        description: "Anchors in regular expressions",
        snippets: [
          {
            id: "regex-start",
            title: "Start",
            description: "Match the start of the string",
            code: "/^/",
            language: "regex",
          },
          {
            id: "regex-end",
            title: "End",
            description: "Match the end of the string",
            code: "/$/",
            language: "regex",
          },
          {
            id: "regex-word-boundary",
            title: "Word Boundary",
            description: "Match a word boundary",
            code: "/\\b/",
            language: "regex",
          },
          {
            id: "regex-non-word-boundary",
            title: "Non-Word Boundary",
            description: "Match a non-word boundary",
            code: "/\\B/",
            language: "regex",
          },
          {
            id: "regex-lookahead",
            title: "Lookahead",
            description: "Match a pattern followed by another pattern",
            code: "/a(?=b)/",
            language: "regex",
          },
        ],
      },
      {
        id: "regex-groups",
        title: "Groups",
        icon: "regex-group",
        description: "Groups in regular expressions",
        snippets: [
          {
            id: "regex-capturing-group",
            title: "Capturing Group",
            description: "Capture a group of characters",
            code: "/(abc)/",
            language: "regex",
          },
          {
            id: "regex-non-capturing-group",
            title: "Non-Capturing Group",
            description: "Group without capturing",
            code: "/(?:abc)/",
            language: "regex",
          },
          {
            id: "regex-named-group",
            title: "Named Group",
            description: "Capture a group with a name",
            code: "/(?<name>abc)/",
            language: "regex",
          },
          {
            id: "regex-backreference",
            title: "Backreference",
            description: "Reference a captured group",
            code: "/(abc)\\1/",
            language: "regex",
          },
          {
            id: "regex-named-backreference",
            title: "Named Backreference",
            description: "Reference a named captured group",
            code: "/(?<name>abc)\\k<name>/",
            language: "regex",
          },
        ],
      },
      {
        id: "regex-special-characters",
        title: "Special Characters",
        icon: "regex-special",
        description: "Special characters in regular expressions",
        snippets: [
          {
            id: "regex-escape",
            title: "Escape",
            description: "Escape a special character",
            code: "/\\./",
            language: "regex",
          },
          {
            id: "regex-alternation",
            title: "Alternation",
            description: "Match either one pattern or another",
            code: "/a|b/",
            language: "regex",
          },
          {
            id: "regex-any-char",
            title: "Any Character",
            description: "Match any character except newline",
            code: "/./s",
            language: "regex",
          },
          {
            id: "regex-word-boundary",
            title: "Word Boundary",
            description: "Match a word boundary",
            code: "/\\b/",
            language: "regex",
          },
          {
            id: "regex-non-word-boundary",
            title: "Non-Word Boundary",
            description: "Match a non-word boundary",
            code: "/\\B/",
            language: "regex",
          },
        ],
      },
    ],
  },
  {
    id: "bash",
    title: "Bash",
    icon: "terminal",
    cheatSheets: [
      {
        id: "bash-commands",
        title: "Bash Commands",
        icon: "terminal",
        description: "Essential bash commands for the command line",
        snippets: [
          {
            id: "bash-navigation",
            title: "Navigation",
            description: "Commands for navigating the file system",
            code: "cd <directory> - Change directory\nls - List files\npwd - Print working directory\ncd .. - Go up one directory\ncd ~ - Go to home directory",
            language: "bash",
          },
          {
            id: "bash-file-ops",
            title: "File Operations",
            description: "Commands for working with files",
            code: "touch <file> - Create empty file\ncp <source> <dest> - Copy file\nmv <source> <dest> - Move/rename file\nrm <file> - Remove file\nrm -r <directory> - Remove directory recursively",
            language: "bash",
          },
          {
            id: "bash-permissions",
            title: "File Permissions",
            description: "Commands for changing file permissions",
            code: "chmod +x <file> - Make executable\nchmod 755 <file> - rwx for owner, rx for others\nchmod 644 <file> - rw for owner, r for others\nchown <user>:<group> <file> - Change owner",
            language: "bash",
          },
          {
            id: "bash-find",
            title: "Find",
            description: "Find files and directories",
            code: 'find . -name "*.js" - Find all .js files\nfind . -type d -name "*test*" - Find directories with \'test\' in name\nfind . -mtime -7 - Find files modified in last 7 days',
            language: "bash",
          },
          {
            id: "bash-grep",
            title: "Grep",
            description: "Search text patterns",
            code: 'grep "pattern" <file> - Search in file\ngrep -r "pattern" . - Recursive search\ngrep -i "pattern" <file> - Case insensitive search',
            language: "bash",
          },
        ],
      },
      {
        id: "bash-scripting",
        title: "Bash Scripting",
        icon: "script",
        description: "Commands and constructs for bash scripting",
        snippets: [
          {
            id: "bash-shebang",
            title: "Shebang",
            description: "Specify the interpreter for the script",
            code: "#!/bin/bash",
            language: "bash",
          },
          {
            id: "bash-variables",
            title: "Variables",
            description: "Define and use variables",
            code: 'var="value"\necho $var',
            language: "bash",
          },
          {
            id: "bash-if",
            title: "If Statement",
            description: "Conditional execution",
            code: "if [ condition ]; then\n  # code\nfi",
            language: "bash",
          },
          {
            id: "bash-for-loop",
            title: "For Loop",
            description: "Loop over a list of items",
            code: "for i in {1..5}; do\n  echo $i\ndone",
            language: "bash",
          },
          {
            id: "bash-while-loop",
            title: "While Loop",
            description: "Loop while a condition is true",
            code: "while [ condition ]; do\n  # code\ndone",
            language: "bash",
          },
        ],
      },
      {
        id: "bash-functions",
        title: "Bash Functions",
        icon: "function",
        description: "Define and use functions in bash",
        snippets: [
          {
            id: "bash-function",
            title: "Define Function",
            description: "Define a function",
            code: "my_func() {\n  # code\n}",
            language: "bash",
          },
          {
            id: "bash-call-function",
            title: "Call Function",
            description: "Call a function",
            code: "my_func",
            language: "bash",
          },
          {
            id: "bash-function-args",
            title: "Function Arguments",
            description: "Pass arguments to a function",
            code: 'my_func() {\n  echo $1\n}\nmy_func "arg1"',
            language: "bash",
          },
          {
            id: "bash-return-value",
            title: "Return Value",
            description: "Return a value from a function",
            code: "my_func() {\n  return 42\n}",
            language: "bash",
          },
          {
            id: "bash-function-scope",
            title: "Function Scope",
            description: "Variable scope in functions",
            code: 'my_func() {\n  local var="local"\n  echo $var\n}',
            language: "bash",
          },
        ],
      },
      {
        id: "bash-redirections",
        title: "Bash Redirections",
        icon: "redirect",
        description: "Input and output redirections",
        snippets: [
          {
            id: "bash-output",
            title: "Output Redirection",
            description: "Redirect output to a file",
            code: "command > file.txt",
            language: "bash",
          },
          {
            id: "bash-append",
            title: "Append Redirection",
            description: "Append output to a file",
            code: "command >> file.txt",
            language: "bash",
          },
          {
            id: "bash-input",
            title: "Input Redirection",
            description: "Redirect input from a file",
            code: "command < file.txt",
            language: "bash",
          },
          {
            id: "bash-pipe",
            title: "Pipe",
            description: "Pipe output to another command",
            code: "command1 | command2",
            language: "bash",
          },
          {
            id: "bash-err-redirection",
            title: "Error Redirection",
            description: "Redirect error output to a file",
            code: "command 2> error.txt",
            language: "bash",
          },
        ],
      },
      {
        id: "bash-processes",
        title: "Bash Processes",
        icon: "process",
        description: "Commands for managing processes",
        snippets: [
          {
            id: "bash-ps",
            title: "List Processes",
            description: "List running processes",
            code: "ps aux",
            language: "bash",
          },
          {
            id: "bash-kill",
            title: "Kill Process",
            description: "Kill a process by PID",
            code: "kill <PID>",
            language: "bash",
          },
          {
            id: "bash-bg",
            title: "Background Process",
            description: "Run a process in the background",
            code: "command &",
            language: "bash",
          },
          {
            id: "bash-fg",
            title: "Foreground Process",
            description: "Bring a background process to the foreground",
            code: "fg %<job>",
            language: "bash",
          },
          {
            id: "bash-jobs",
            title: "List Jobs",
            description: "List background jobs",
            code: "jobs",
            language: "bash",
          },
        ],
      },
      {
        id: "bash-networking",
        title: "Bash Networking",
        icon: "network",
        description: "Networking commands",
        snippets: [
          {
            id: "bash-ping",
            title: "Ping",
            description: "Ping a host",
            code: "ping <host>",
            language: "bash",
          },
          {
            id: "bash-curl",
            title: "Curl",
            description: "Transfer data from or to a server",
            code: "curl <url>",
            language: "bash",
          },
          {
            id: "bash-wget",
            title: "Wget",
            description: "Download files from the web",
            code: "wget <url>",
            language: "bash",
          },
          {
            id: "bash-netstat",
            title: "Netstat",
            description: "Network statistics",
            code: "netstat -tuln",
            language: "bash",
          },
          {
            id: "bash-ssh",
            title: "SSH",
            description: "Secure shell connection",
            code: "ssh <user>@<host>",
            language: "bash",
          },
        ],
      },
      {
        id: "bash-system-info",
        title: "Bash System Info",
        icon: "info",
        description: "Commands for system information",
        snippets: [
          {
            id: "bash-uname",
            title: "Uname",
            description: "System information",
            code: "uname -a",
            language: "bash",
          },
          {
            id: "bash-df",
            title: "Disk Space",
            description: "Disk space usage",
            code: "df -h",
            language: "bash",
          },
          {
            id: "bash-free",
            title: "Memory Usage",
            description: "Memory usage",
            code: "free -h",
            language: "bash",
          },
          {
            id: "bash-top",
            title: "Top",
            description: "System monitoring",
            code: "top",
            language: "bash",
          },
          {
            id: "bash-uptime",
            title: "Uptime",
            description: "System uptime",
            code: "uptime",
            language: "bash",
          },
        ],
      },
    ],
  },
  {
    id: "design",
    title: "Design Tokens",
    icon: "palette",
    cheatSheets: [
      {
        id: "design-colors",
        title: "Color Palettes",
        icon: "palette",
        description: "Common color palettes and hex codes",
        snippets: [
          {
            id: "design-primary-colors",
            title: "Primary Colors",
            code: "Red: #FF0000\nGreen: #00FF00\nBlue: #0000FF\nYellow: #FFFF00\nMagenta: #FF00FF\nCyan: #00FFFF",
            language: "css",
          },
          {
            id: "design-material-blue",
            title: "Material Blue",
            code: "Blue 50: #E3F2FD\nBlue 100: #BBDEFB\n... (full material scale)",
            language: "css",
          },
          {
            id: "design-tailwind",
            title: "Tailwind Colors",
            code: "Blue: #3B82F6\nRed: #EF4444\n... (full set)",
            language: "css",
          },
          {
            id: "design-ant-colors",
            title: "Ant Design",
            code: "Daybreak Blue: #1890ff\nPolar Green: #52c41a\n... (10 colors)",
            language: "css",
          },
          {
            id: "design-ibm-carbon",
            title: "IBM Carbon",
            code: "Blue 60: #0f62fe\nRed 60: #da1e28\n... (full palette)",
            language: "css",
          },
        ],
      },
      {
        id: "design-typography",
        title: "Typography",
        icon: "type",
        description: "Font systems and text styling",
        snippets: [
          {
            id: "design-font-pairs",
            title: "Font Combinations",
            code: "Inter + Space Grotesk\nRoboto + Roboto Slab\n... (10 pairs)",
            language: "css",
          },
          {
            id: "design-type-scale",
            title: "Modular Scale",
            code: ":root {\n  --text-xs: 0.75rem;\n  --text-sm: 0.875rem;\n  ... (8 steps)",
            language: "css",
          },
          {
            id: "design-line-height",
            title: "Line Heights",
            code: "--line-none: 1;\n--line-tight: 1.25;\n--line-normal: 1.5;\n--line-relaxed: 1.75;",
            language: "css",
          },
          {
            id: "design-variable-fonts",
            title: "Variable Font Axes",
            code: "font-variation-settings:\n  'wght' 400,\n  'wdth' 100,\n  'opsz' 14;",
            language: "css",
          },
        ],
      },
      {
        id: "design-spacing",
        title: "Spacing & Layout",
        icon: "layout",
        description: "Layout dimensions and spacing systems",
        snippets: [
          {
            id: "design-spacing-scale",
            title: "Spacing Scale",
            code: "--space-xxs: 0.25rem;\n--space-xs: 0.5rem;\n... (8 steps up to 4rem)",
            language: "css",
          },
          {
            id: "design-container",
            title: "Container Sizes",
            code: "--container-sm: 640px;\n--container-md: 768px;\n... (5 sizes)",
            language: "css",
          },
          {
            id: "design-grid-gap",
            title: "Grid Gaps",
            code: "--gap-xs: 0.5rem;\n--gap-md: 1rem;\n--gap-xl: 2rem;",
            language: "css",
          },
        ],
      },
      {
        id: "design-shadows",
        title: "Shadows & Effects",
        icon: "droplet",
        description: "Elevation and shadow systems",
        snippets: [
          {
            id: "design-shadow-scale",
            title: "Shadow Levels",
            code: "--shadow-sm: 0 1px 3px rgba(0,0,0,0.12);\n--shadow-md: 0 4px 6px...\n... (5 levels)",
            language: "css",
          },
          {
            id: "design-blur",
            title: "Backdrop Blur",
            code: "--blur-sm: blur(4px);\n--blur-md: blur(8px);\n--blur-lg: blur(16px);",
            language: "css",
          },
        ],
      },
      {
        id: "design-borders",
        title: "Borders & Radius",
        icon: "border",
        description: "Border styling and radius systems",
        snippets: [
          {
            id: "design-border-width",
            title: "Border Widths",
            code: "--border-sm: 1px;\n--border-md: 2px;\n--border-lg: 4px;",
            language: "css",
          },
          {
            id: "design-radius",
            title: "Border Radius",
            code: "--radius-sm: 4px;\n--radius-md: 8px;\n--radius-lg: 16px;",
            language: "css",
          },
        ],
      },
      {
        id: "design-motion",
        title: "Motion & Timing",
        icon: "clock",
        description: "Animation curves and durations",
        snippets: [
          {
            id: "design-easing",
            title: "Easing Functions",
            code: "--ease-in: cubic-bezier(0.4,0,1,1);\n--ease-out: cubic-bezier(0,0,0.2,1);",
            language: "css",
          },
          {
            id: "design-duration",
            title: "Transition Durations",
            code: "--duration-fast: 100ms;\n--duration-normal: 250ms;\n--duration-slow: 400ms;",
            language: "css",
          },
        ],
      },
      {
        id: "design-breakpoints",
        title: "Breakpoints",
        icon: "monitor",
        description: "Responsive design breakpoints",
        snippets: [
          {
            id: "design-bp-default",
            title: "Standard Breakpoints",
            code: "--bp-sm: 640px;\n--bp-md: 768px;\n--bp-lg: 1024px;",
            language: "css",
          },
        ],
      },
      {
        id: "design-zindex",
        title: "Z-Index Scale",
        icon: "layers",
        description: "Stacking order management",
        snippets: [
          {
            id: "design-zscale",
            title: "Z-Index Levels",
            code: "--z-base: 0;\n--z-dropdown: 1000;\n--z-modal: 2000;\n--z-toast: 3000;",
            language: "css",
          },
        ],
      },
      {
        id: "design-icons",
        title: "Icon System",
        icon: "feather",
        description: "Icon sizing and styling",
        snippets: [
          {
            id: "design-icon-sizes",
            title: "Icon Sizes",
            code: "--icon-sm: 16px;\n--icon-md: 24px;\n--icon-lg: 32px;",
            language: "css",
          },
        ],
      },
      {
        id: "design-theming",
        title: "Theming",
        icon: "moon",
        description: "Dark/light theme variables",
        snippets: [
          {
            id: "design-dark-mode",
            title: "Dark Theme",
            code: "[data-theme='dark'] {\n  --bg-primary: #1a1a1a;\n  --text-primary: #fff;\n}",
            language: "css",
          },
        ],
      },
    ],
  },
  {
    id: "javascript",
    title: "JavaScript",
    icon: "javascript",
    cheatSheets: [
      {
        id: "js-basics",
        title: "JavaScript Basics",
        icon: "js",
        description: "Basic JavaScript syntax and functions",
        snippets: [
          {
            id: "js-variables",
            title: "JavaScript Variables",
            description: "Declaring variables in JavaScript",
            code: "let x = 5;\nconst y = 10;\nvar z = x + y;",
            language: "javascript",
          },
          {
            id: "js-functions",
            title: "JavaScript Functions",
            description: "Defining and calling functions",
            code: "function greet(name) {\n    return `Hello, ${name}!`;\n}\nconsole.log(greet('Alice'));",
            language: "javascript",
          },
          {
            id: "js-conditions",
            title: "JavaScript Conditions",
            description: "Using if-else statements",
            code: "let age = 18;\nif (age >= 18) {\n    console.log('Adult');\n} else {\n    console.log('Minor');\n}",
            language: "javascript",
          },
          {
            id: "js-loops",
            title: "JavaScript Loops",
            description: "Using for and while loops",
            code: "for (let i = 0; i < 5; i++) {\n    console.log(i);\n}\n\nlet j = 0;\nwhile (j < 5) {\n    console.log(j);\n    j++;\n}",
            language: "javascript",
          },
        ],
      },
      {
        id: "js-dom",
        title: "JavaScript DOM",
        icon: "dom",
        description: "Manipulating the DOM with JavaScript",
        snippets: [
          {
            id: "js-dom-selector",
            title: "DOM Selector",
            description: "Selecting elements from the DOM",
            code: "document.getElementById('myId');\ndocument.querySelector('.myClass');",
            language: "javascript",
          },
          {
            id: "js-dom-events",
            title: "DOM Events",
            description: "Adding event listeners",
            code: "document.getElementById('myButton').addEventListener('click', function() {\n    alert('Button clicked!');\n});",
            language: "javascript",
          },
          {
            id: "js-dom-manipulation",
            title: "DOM Manipulation",
            description: "Changing DOM elements",
            code: "let element = document.getElementById('myElement');\nelement.textContent = 'New Text';\nelement.style.color = 'blue';",
            language: "javascript",
          },
        ],
      },
      {
        id: "js-es6",
        title: "ES6 Features",
        icon: "es6",
        description: "Modern JavaScript ES6 features",
        snippets: [
          {
            id: "js-arrow-functions",
            title: "Arrow Functions",
            description: "Using arrow functions",
            code: "const greet = (name) => `Hello, ${name}!`;\nconsole.log(greet('Alice'));",
            language: "javascript",
          },
          {
            id: "js-template-literals",
            title: "Template Literals",
            description: "Using template literals",
            code: "const name = 'Alice';\nconsole.log(`Hello, ${name}!`);",
            language: "javascript",
          },
          {
            id: "js-destructuring",
            title: "Destructuring",
            description: "Destructuring arrays and objects",
            code: "const [a, b] = [1, 2];\nconst { name, age } = { name: 'Alice', age: 25 };",
            language: "javascript",
          },
        ],
      },
      {
        id: "js-async",
        title: "Asynchronous JavaScript",
        icon: "async",
        description: "Handling asynchronous operations",
        snippets: [
          {
            id: "js-promises",
            title: "Promises",
            description: "Using promises",
            code: "const promise = new Promise((resolve, reject) => {\n    setTimeout(() => resolve('Done!'), 1000);\n});\npromise.then(result => console.log(result));",
            language: "javascript",
          },
          {
            id: "js-async-await",
            title: "Async/Await",
            description: "Using async/await",
            code: "async function fetchData() {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n}\nfetchData();",
            language: "javascript",
          },
        ],
      },
      {
        id: "js-modules",
        title: "JavaScript Modules",
        icon: "modules",
        description: "Working with JavaScript modules",
        snippets: [
          {
            id: "js-export",
            title: "Exporting Modules",
            description: "Exporting functions and variables",
            code: "export const name = 'Alice';\nexport function greet(name) {\n    return `Hello, ${name}!`;\n}",
            language: "javascript",
          },
          {
            id: "js-import",
            title: "Importing Modules",
            description: "Importing functions and variables",
            code: "import { name, greet } from './module.js';\nconsole.log(greet(name));",
            language: "javascript",
          },
        ],
      },
      {
        id: "js-error-handling",
        title: "Error Handling",
        icon: "error",
        description: "Handling errors in JavaScript",
        snippets: [
          {
            id: "js-try-catch",
            title: "Try/Catch",
            description: "Using try/catch blocks",
            code: "try {\n    throw new Error('Something went wrong');\n} catch (error) {\n    console.error(error.message);\n}",
            language: "javascript",
          },
          {
            id: "js-custom-errors",
            title: "Custom Errors",
            description: "Creating custom errors",
            code: "class CustomError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'CustomError';\n    }\n}\nthrow new CustomError('Custom error message');",
            language: "javascript",
          },
        ],
      },
    ],
  },
  {
    id: "reactjs",
    title: "React.js",
    icon: "react",
    cheatSheets: [
      {
        id: "react-basics",
        title: "React Basics",
        icon: "react",
        description: "Basic React concepts and syntax",
        snippets: [
          {
            id: "react-component",
            title: "React Component",
            description: "Creating a simple React component",
            code: "import React from 'react';\n\nfunction Greet(props) {\n    return <h1>Hello, {props.name}!</h1>;\n}\n\nexport default Greet;",
            language: "javascript",
          },
          {
            id: "react-state",
            title: "React State",
            description: "Using state in a React component",
            code: "import React, { useState } from 'react';\n\nfunction Counter() {\n    const [count, setCount] = useState(0);\n    return (\n        <div>\n            <p>You clicked {count} times</p>\n            <button onClick={() => setCount(count + 1)}>\n                Click me\n            </button>\n        </div>\n    );\n}\n\nexport default Counter;",
            language: "javascript",
          },
        ],
      },
      {
        id: "react-hooks",
        title: "React Hooks",
        icon: "hooks",
        description: "Using React Hooks for state and side effects",
        snippets: [
          {
            id: "react-useEffect",
            title: "useEffect Hook",
            description: "Using the useEffect hook for side effects",
            code: "import React, { useState, useEffect } from 'react';\n\nfunction Example() {\n    const [data, setData] = useState(null);\n\n    useEffect(() => {\n        fetch('https://api.example.com/data')\n            .then(response => response.json())\n            .then(data => setData(data));\n    }, []);\n\n    return <div>{data ? data.message : 'Loading...'}</div>;\n}\n\nexport default Example;",
            language: "javascript",
          },
          {
            id: "react-useContext",
            title: "useContext Hook",
            description: "Using the useContext hook for context",
            code: "import React, { useContext } from 'react';\nimport { ThemeContext } from './ThemeContext';\n\nfunction ThemedButton() {\n    const theme = useContext(ThemeContext);\n    return (\n        <button style={{ background: theme.background, color: theme.foreground }}>\n            Themed Button\n        </button>\n    );\n}\n\nexport default ThemedButton;",
            language: "javascript",
          },
        ],
      },
      {
        id: "react-router",
        title: "React Router",
        icon: "router",
        description: "Routing in React applications",
        snippets: [
          {
            id: "react-router-setup",
            title: "Router Setup",
            description: "Setting up React Router",
            code: "import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './Home';\nimport About from './About';\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/about\">\n                    <About />\n                </Route>\n                <Route path=\"/\">\n                    <Home />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;",
            language: "javascript",
          },
          {
            id: "react-router-links",
            title: "Router Links",
            description: "Creating navigation links",
            code: 'import { Link } from \'react-router-dom\';\n\nfunction Navbar() {\n    return (\n        <nav>\n            <ul>\n                <li>\n                    <Link to="/">Home</Link>\n                </li>\n                <li>\n                    <Link to="/about">About</Link>\n                </li>\n            </ul>\n        </nav>\n    );\n}\n\nexport default Navbar;',
            language: "javascript",
          },
        ],
      },
      {
        id: "react-forms",
        title: "React Forms",
        icon: "forms",
        description: "Handling forms in React",
        snippets: [
          {
            id: "react-controlled-form",
            title: "Controlled Form",
            description: "Creating a controlled form component",
            code: "import React, { useState } from 'react';\n\nfunction Form() {\n    const [name, setName] = useState('');\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        alert(`Submitted name: ${name}`);\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <label>\n                Name:\n                <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n            </label>\n            <button type=\"submit\">Submit</button>\n        </form>\n    );\n}\n\nexport default Form;",
            language: "javascript",
          },
        ],
      },
      {
        id: "react-context",
        title: "React Context",
        icon: "context",
        description: "Using Context API for state management",
        snippets: [
          {
            id: "react-context-provider",
            title: "Context Provider",
            description: "Creating a context provider",
            code: "import React, { createContext, useState } from 'react';\n\nconst ThemeContext = createContext();\n\nfunction ThemeProvider({ children }) {\n    const [theme, setTheme] = useState('light');\n\n    const toggleTheme = () => {\n        setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));\n    };\n\n    return (\n        <ThemeContext.Provider value={{ theme, toggleTheme }}>\n            {children}\n        </ThemeContext.Provider>\n    );\n}\n\nexport { ThemeContext, ThemeProvider };",
            language: "javascript",
          },
        ],
      },
      {
        id: "react-styling",
        title: "React Styling",
        icon: "style",
        description: "Styling React components",
        snippets: [
          {
            id: "react-css-modules",
            title: "CSS Modules",
            description: "Using CSS Modules for styling",
            code: "import React from 'react';\nimport styles from './Button.module.css';\n\nfunction Button() {\n    return <button className={styles.button}>Click Me</button>;\n}\n\nexport default Button;",
            language: "javascript",
          },
          {
            id: "react-inline-styles",
            title: "Inline Styles",
            description: "Using inline styles in React",
            code: "import React from 'react';\n\nfunction Button() {\n    const buttonStyle = {\n        backgroundColor: 'blue',\n        color: 'white',\n        padding: '10px 20px',\n        border: 'none',\n        borderRadius: '5px',\n    };\n\n    return <button style={buttonStyle}>Click Me</button>;\n}\n\nexport default Button;",
            language: "javascript",
          },
        ],
      },
    ],
  },
  {
    id: "tailwindcss",
    title: "Tailwind CSS",
    icon: "tailwind",
    cheatSheets: [
      {
        id: "tailwind-basics",
        title: "Tailwind Basics",
        icon: "tailwind",
        description: "Basic Tailwind CSS concepts and utility classes",
        snippets: [
          {
            id: "tailwind-colors",
            title: "Colors",
            description: "Using Tailwind's color palette",
            code: '<div class="bg-blue-500 text-white p-4">\n    This is a blue div with white text.\n</div>',
            language: "html",
          },
          {
            id: "tailwind-spacing",
            title: "Spacing",
            description: "Using Tailwind's spacing utilities",
            code: '<div class="m-4 p-4">\n    This div has margin and padding.\n</div>',
            language: "html",
          },
        ],
      },
      {
        id: "tailwind-flexbox",
        title: "Flexbox",
        icon: "flexbox",
        description: "Using Tailwind's flexbox utilities",
        snippets: [
          {
            id: "tailwind-flex-container",
            title: "Flex Container",
            description: "Creating a flex container",
            code: '<div class="flex justify-center items-center h-screen">\n    <div>Centered Content</div>\n</div>',
            language: "html",
          },
          {
            id: "tailwind-flex-items",
            title: "Flex Items",
            description: "Styling flex items",
            code: '<div class="flex">\n    <div class="flex-1 p-4 bg-red-200">Item 1</div>\n    <div class="flex-1 p-4 bg-blue-200">Item 2</div>\n</div>',
            language: "html",
          },
        ],
      },
      {
        id: "tailwind-grid",
        title: "Grid",
        icon: "grid",
        description: "Using Tailwind's grid utilities",
        snippets: [
          {
            id: "tailwind-grid-container",
            title: "Grid Container",
            description: "Creating a grid container",
            code: '<div class="grid grid-cols-3 gap-4">\n    <div class="bg-red-200 p-4">Item 1</div>\n    <div class="bg-blue-200 p-4">Item 2</div>\n    <div class="bg-green-200 p-4">Item 3</div>\n</div>',
            language: "html",
          },
        ],
      },
      {
        id: "tailwind-responsive",
        title: "Responsive Design",
        icon: "responsive",
        description: "Using Tailwind's responsive utilities",
        snippets: [
          {
            id: "tailwind-responsive-text",
            title: "Responsive Text",
            description: "Making text responsive",
            code: '<p class="text-sm md:text-base lg:text-lg">\n    This text changes size based on screen width.\n</p>',
            language: "html",
          },
        ],
      },
      {
        id: "tailwind-customization",
        title: "Customization",
        icon: "customize",
        description: "Customizing Tailwind CSS",
        snippets: [
          {
            id: "tailwind-config",
            title: "Tailwind Config",
            description: "Customizing Tailwind in tailwind.config.js",
            code: "module.exports = {\n    theme: {\n        extend: {\n            colors: {\n                'custom-blue': '#1e3a8a',\n            },\n        },\n    },\n    variants: {},\n    plugins: [],\n};",
            language: "javascript",
          },
        ],
      },
      {
        id: "tailwind-components",
        title: "Components",
        icon: "components",
        description: "Building components with Tailwind CSS",
        snippets: [
          {
            id: "tailwind-button",
            title: "Button Component",
            description: "Creating a button component",
            code: '<button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">\n    Button\n</button>',
            language: "html",
          },
        ],
      },
    ],
  },
  {
    id: "zustand",
    title: "Zustand",
    icon: "zustand",
    cheatSheets: [
      {
        id: "zustand-basics",
        title: "Zustand Basics",
        icon: "zustand",
        description: "Basic Zustand concepts and usage",
        snippets: [
          {
            id: "zustand-store-creation",
            title: "Store Creation",
            description: "Creating a basic Zustand store",
            code: "import create from 'zustand';\n\nconst useStore = create((set) => ({\n    count: 0,\n    increment: () => set((state) => ({ count: state.count + 1 })),\n    decrement: () => set((state) => ({ count: state.count - 1 })),\n}));\n\nexport default useStore;",
            language: "javascript",
          },
          {
            id: "zustand-store-usage",
            title: "Store Usage",
            description: "Using the Zustand store in a React component",
            code: "import React from 'react';\nimport useStore from './useStore';\n\nfunction Counter() {\n    const { count, increment, decrement } = useStore();\n\n    return (\n        <div>\n            <p>Count: {count}</p>\n            <button onClick={increment}>Increment</button>\n            <button onClick={decrement}>Decrement</button>\n        </div>\n    );\n}\n\nexport default Counter;",
            language: "javascript",
          },
        ],
      },
      {
        id: "zustand-middlewares",
        title: "Middlewares",
        icon: "middleware",
        description: "Using middlewares in Zustand",
        snippets: [
          {
            id: "zustand-persist-middleware",
            title: "Persist Middleware",
            description:
              "Using persist middleware to save state to localStorage",
            code: "import create from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nconst useStore = create(\n    persist(\n        (set) => ({\n            count: 0,\n            increment: () => set((state) => ({ count: state.count + 1 })),\n            decrement: () => set((state) => ({ count: state.count - 1 })),\n        }),\n        {\n            name: 'count-storage', // unique name\n        }\n    )\n);\n\nexport default useStore;",
            language: "javascript",
          },
        ],
      },
      {
        id: "zustand-selectors",
        title: "Selectors",
        icon: "selectors",
        description: "Using selectors in Zustand",
        snippets: [
          {
            id: "zustand-selector-usage",
            title: "Selector Usage",
            description: "Using selectors to optimize component rendering",
            code: "import React from 'react';\nimport useStore from './useStore';\n\nfunction CountDisplay() {\n    const count = useStore((state) => state.count);\n\n    return <div>Count: {count}</div>;\n}\n\nexport default CountDisplay;",
            language: "javascript",
          },
        ],
      },
      {
        id: "zustand-actions",
        title: "Actions",
        icon: "actions",
        description: "Defining and using actions in Zustand",
        snippets: [
          {
            id: "zustand-action-creation",
            title: "Action Creation",
            description: "Creating actions in the Zustand store",
            code: "import create from 'zustand';\n\nconst useStore = create((set) => ({\n    todos: [],\n    addTodo: (text) => set((state) => ({\n        todos: [...state.todos, { id: Date.now(), text, completed: false }],\n    })),\n    toggleTodo: (id) => set((state) => ({\n        todos: state.todos.map((todo) =>\n            todo.id === id ? { ...todo, completed: !todo.completed } : todo\n        ),\n    })),\n}));\n\nexport default useStore;",
            language: "javascript",
          },
        ],
      },
      {
        id: "zustand-devtools",
        title: "DevTools",
        icon: "devtools",
        description: "Using DevTools with Zustand",
        snippets: [
          {
            id: "zustand-devtools-integration",
            title: "DevTools Integration",
            description: "Integrating Zustand with Redux DevTools",
            code: "import create from 'zustand';\nimport { devtools } from 'zustand/middleware';\n\nconst useStore = create(\n    devtools(\n        (set) => ({\n            count: 0,\n            increment: () => set((state) => ({ count: state.count + 1 })),\n            decrement: () => set((state) => ({ count: state.count - 1 })),\n        }),\n        { name: 'CountStore' }\n    )\n);\n\nexport default useStore;",
            language: "javascript",
          },
        ],
      },
      {
        id: "zustand-combining-stores",
        title: "Combining Stores",
        icon: "combine",
        description: "Combining multiple stores in Zustand",
        snippets: [
          {
            id: "zustand-combine-stores",
            title: "Combine Stores",
            description: "Combining multiple Zustand stores",
            code: "import create from 'zustand';\n\nconst useCounterStore = create((set) => ({\n    count: 0,\n    increment: () => set((state) => ({ count: state.count + 1 })),\n    decrement: () => set((state) => ({ count: state.count - 1 })),\n}));\n\nconst useTodoStore = create((set) => ({\n    todos: [],\n    addTodo: (text) => set((state) => ({\n        todos: [...state.todos, { id: Date.now(), text, completed: false }],\n    })),\n}));\n\nconst useCombinedStore = create((...a) => ({\n    ...useCounterStore(...a),\n    ...useTodoStore(...a),\n}));\n\nexport default useCombinedStore;",
            language: "javascript",
          },
        ],
      },
    ],
  },
  {
    id: "react-query",
    title: "React Query",
    icon: "react-query",
    cheatSheets: [
      {
        id: "react-query-basics",
        title: "React Query Basics",
        icon: "react-query",
        description: "Basic React Query concepts and usage",
        snippets: [
          {
            id: "react-query-setup",
            title: "Setup",
            description: "Setting up React Query in your application",
            code: "import { QueryClient, QueryClientProvider } from 'react-query';\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n    return (\n        <QueryClientProvider client={queryClient}>\n            <YourComponent />\n        </QueryClientProvider>\n    );\n}\n\nexport default App;",
            language: "javascript",
          },
          {
            id: "react-query-basic-query",
            title: "Basic Query",
            description: "Creating a basic query to fetch data",
            code: "import { useQuery } from 'react-query';\n\nfunction fetchUserData() {\n    return fetch('https://api.example.com/user').then((res) => res.json());\n}\n\nfunction UserComponent() {\n    const { data, isLoading, error } = useQuery('userData', fetchUserData);\n\n    if (isLoading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error.message}</div>;\n\n    return <div>{data.name}</div>;\n}\n\nexport default UserComponent;",
            language: "javascript",
          },
        ],
      },
      {
        id: "react-query-mutations",
        title: "Mutations",
        icon: "mutations",
        description: "Using mutations to post, update, or delete data",
        snippets: [
          {
            id: "react-query-basic-mutation",
            title: "Basic Mutation",
            description: "Creating a basic mutation to post data",
            code: "import { useMutation, useQueryClient } from 'react-query';\n\nfunction postUserData(newUser) {\n    return fetch('https://api.example.com/user', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newUser),\n    }).then((res) => res.json());\n}\n\nfunction AddUserComponent() {\n    const queryClient = useQueryClient();\n    const mutation = useMutation(postUserData, {\n        onSuccess: () => {\n            queryClient.invalidateQueries('userData');\n        },\n    });\n\n    const handleSubmit = (newUser) => {\n        mutation.mutate(newUser);\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            {/* Form fields */}\n        </form>\n    );\n}\n\nexport default AddUserComponent;",
            language: "javascript",
          },
        ],
      },
      {
        id: "react-query-query-invalidation",
        title: "Query Invalidation",
        icon: "invalidate",
        description: "Invalidating and refetching queries",
        snippets: [
          {
            id: "react-query-invalidate-queries",
            title: "Invalidate Queries",
            description: "Invalidating queries to refetch data",
            code: "import { useQueryClient } from 'react-query';\n\nfunction RefreshButton() {\n    const queryClient = useQueryClient();\n\n    const handleRefresh = () => {\n        queryClient.invalidateQueries('userData');\n    };\n\n    return <button onClick={handleRefresh}>Refresh Data</button>;\n}\n\nexport default RefreshButton;",
            language: "javascript",
          },
        ],
      },
      {
        id: "react-query-pagination",
        title: "Pagination",
        icon: "pagination",
        description: "Handling pagination with React Query",
        snippets: [
          {
            id: "react-query-paginated-query",
            title: "Paginated Query",
            description: "Creating a query with pagination",
            code: "import { useQuery } from 'react-query';\n\nfunction fetchPaginatedData(page) {\n    return fetch(`https://api.example.com/data?page=${page}`).then((res) => res.json());\n}\n\nfunction PaginatedComponent() {\n    const [page, setPage] = React.useState(1);\n    const { data, isLoading, error } = useQuery(['paginatedData', page], () => fetchPaginatedData(page));\n\n    if (isLoading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error.message}</div>;\n\n    return (\n        <div>\n            {data.map((item) => (\n                <div key={item.id}>{item.name}</div>\n            ))}\n            <button onClick={() => setPage((old) => Math.max(old - 1, 1))} disabled={page === 1}>\n                Previous\n            </button>\n            <button onClick={() => setPage((old) => old + 1)} disabled={!data.hasMore}>\n                Next\n            </button>\n        </div>\n    );\n}\n\nexport default PaginatedComponent;",
            language: "javascript",
          },
        ],
      },
      {
        id: "react-query-devtools",
        title: "DevTools",
        icon: "devtools",
        description: "Using React Query DevTools for debugging",
        snippets: [
          {
            id: "react-query-devtools-setup",
            title: "DevTools Setup",
            description: "Setting up React Query DevTools",
            code: "import { QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n    return (\n        <QueryClientProvider client={queryClient}>\n            <YourComponent />\n            <ReactQueryDevtools initialIsOpen={false} />\n        </QueryClientProvider>\n    );\n}\n\nexport default App;",
            language: "javascript",
          },
        ],
      },
      {
        id: "react-query-optimistic-updates",
        title: "Optimistic Updates",
        icon: "optimistic",
        description: "Implementing optimistic updates with React Query",
        snippets: [
          {
            id: "react-query-optimistic-update",
            title: "Optimistic Update",
            description: "Creating an optimistic update for a mutation",
            code: "import { useMutation, useQueryClient } from 'react-query';\n\nfunction updateUserData(updatedUser) {\n    return fetch(`https://api.example.com/user/${updatedUser.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updatedUser),\n    }).then((res) => res.json());\n}\n\nfunction UpdateUserComponent({ user }) {\n    const queryClient = useQueryClient();\n    const mutation = useMutation(updateUserData, {\n        onMutate: async (newUser) => {\n            await queryClient.cancelQueries('userData');\n            const previousUserData = queryClient.getQueryData('userData');\n            queryClient.setQueryData('userData', newUser);\n            return { previousUserData };\n        },\n        onError: (err, newUser, context) => {\n            queryClient.setQueryData('userData', context.previousUserData);\n        },\n        onSettled: () => {\n            queryClient.invalidateQueries('userData');\n        },\n    });\n\n    const handleUpdate = (updatedUser) => {\n        mutation.mutate(updatedUser);\n    };\n\n    return (\n        <form onSubmit={handleUpdate}>\n            {/* Form fields */}\n        </form>\n    );\n}\n\nexport default UpdateUserComponent;",
            language: "javascript",
          },
        ],
      },
    ],
  },
  {
    id: "axios",
    title: "Axios",
    icon: "axios",
    cheatSheets: [
      {
        id: "axios-basics",
        title: "Axios Basics",
        icon: "axios",
        description: "Basic Axios concepts and usage",
        snippets: [
          {
            id: "axios-get-request",
            title: "GET Request",
            description: "Making a GET request with Axios",
            code: "import axios from 'axios';\n\naxios.get('https://api.example.com/data')\n    .then(response => {\n        console.log(response.data);\n    })\n    .catch(error => {\n        console.error('Error fetching data: ', error);\n    });",
            language: "javascript",
          },
          {
            id: "axios-post-request",
            title: "POST Request",
            description: "Making a POST request with Axios",
            code: "import axios from 'axios';\n\naxios.post('https://api.example.com/data', { key: 'value' })\n    .then(response => {\n        console.log(response.data);\n    })\n    .catch(error => {\n        console.error('Error posting data: ', error);\n    });",
            language: "javascript",
          },
        ],
      },
      {
        id: "axios-configuration",
        title: "Configuration",
        icon: "config",
        description: "Configuring Axios instances and requests",
        snippets: [
          {
            id: "axios-instance",
            title: "Axios Instance",
            description: "Creating an Axios instance with custom configuration",
            code: "import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://api.example.com',\n    timeout: 1000,\n    headers: {'X-Custom-Header': 'foobar'}\n});\n\ninstance.get('/data')\n    .then(response => {\n        console.log(response.data);\n    });",
            language: "javascript",
          },
        ],
      },
      {
        id: "axios-error-handling",
        title: "Error Handling",
        icon: "error",
        description: "Handling errors in Axios requests",
        snippets: [
          {
            id: "axios-error-handling",
            title: "Error Handling",
            description: "Handling errors in Axios requests",
            code: "import axios from 'axios';\n\naxios.get('https://api.example.com/data')\n    .then(response => {\n        console.log(response.data);\n    })\n    .catch(error => {\n        if (error.response) {\n            // The request was made and the server responded with a status code\n            console.error('Response data: ', error.response.data);\n            console.error('Response status: ', error.response.status);\n        } else if (error.request) {\n            // The request was made but no response was received\n            console.error('No response received: ', error.request);\n        } else {\n            // Something happened in setting up the request\n            console.error('Error: ', error.message);\n        }\n    });",
            language: "javascript",
          },
        ],
      },
      {
        id: "axios-interceptors",
        title: "Interceptors",
        icon: "interceptors",
        description: "Using interceptors to modify requests or responses",
        snippets: [
          {
            id: "axios-request-interceptor",
            title: "Request Interceptor",
            description: "Adding a request interceptor",
            code: "import axios from 'axios';\n\naxios.interceptors.request.use(config => {\n    // Do something before request is sent\n    config.headers['Authorization'] = 'Bearer ' + localStorage.getItem('token');\n    return config;\n}, error => {\n    // Do something with request error\n    return Promise.reject(error);\n});",
            language: "javascript",
          },
          {
            id: "axios-response-interceptor",
            title: "Response Interceptor",
            description: "Adding a response interceptor",
            code: "import axios from 'axios';\n\naxios.interceptors.response.use(response => {\n    // Any status code that lies within the range of 2xx causes this function to trigger\n    return response;\n}, error => {\n    // Any status codes outside 2xx cause this function to trigger\n    if (error.response.status === 401) {\n        // Handle unauthorized access\n    }\n    return Promise.reject(error);\n});",
            language: "javascript",
          },
        ],
      },
      {
        id: "axios-concurrent-requests",
        title: "Concurrent Requests",
        icon: "concurrent",
        description: "Making concurrent requests with Axios",
        snippets: [
          {
            id: "axios-all-requests",
            title: "Axios.all",
            description: "Making multiple concurrent requests with Axios.all",
            code: "import axios from 'axios';\n\nfunction getUserAccount() {\n    return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n    return axios.get('/user/12345/permissions');\n}\n\naxios.all([getUserAccount(), getUserPermissions()])\n    .then(axios.spread((acct, perms) => {\n        // Both requests are now complete\n        console.log(acct.data, perms.data);\n    }));",
            language: "javascript",
          },
        ],
      },
      {
        id: "axios-cancellation",
        title: "Cancellation",
        icon: "cancel",
        description: "Cancelling Axios requests",
        snippets: [
          {
            id: "axios-cancel-token",
            title: "Cancel Token",
            description: "Using a cancel token to cancel a request",
            code: "import axios from 'axios';\n\nconst source = axios.CancelToken.source();\n\naxios.get('https://api.example.com/data', {\n    cancelToken: source.token\n})\n    .then(response => {\n        console.log(response.data);\n    })\n    .catch(error => {\n        if (axios.isCancel(error)) {\n            console.log('Request canceled: ', error.message);\n        } else {\n            console.error('Error: ', error);\n        }\n    });\n\n// Cancel the request\nsource.cancel('Operation canceled by the user.');",
            language: "javascript",
          },
        ],
      },
    ],
  },
  {
    id: "linux-tools",
    title: "Linux Tools",
    icon: "linux",
    cheatSheets: [
      {
        id: "file-operations",
        title: "File Operations",
        icon: "file",
        description: "Basic file operations in Linux",
        snippets: [
          {
            id: "list-files",
            title: "List Files",
            description: "Listing files in a directory",
            code: "ls\nls -l\nls -a",
            language: "bash",
          },
          {
            id: "copy-files",
            title: "Copy Files",
            description: "Copying files and directories",
            code: "cp source.txt destination.txt\ncp -r source_directory destination_directory",
            language: "bash",
          },
          {
            id: "move-files",
            title: "Move Files",
            description: "Moving files and directories",
            code: "mv oldname.txt newname.txt\nmv file.txt /path/to/destination",
            language: "bash",
          },
        ],
      },
      {
        id: "text-processing",
        title: "Text Processing",
        icon: "text",
        description: "Text processing tools in Linux",
        snippets: [
          {
            id: "grep-command",
            title: "grep Command",
            description: "Searching for patterns in files",
            code: "grep 'pattern' filename.txt\ngrep -i 'pattern' filename.txt\ngrep -r 'pattern' /path/to/directory",
            language: "bash",
          },
          {
            id: "awk-command",
            title: "awk Command",
            description: "Using awk for text processing",
            code: "awk '{print $1}' filename.txt\nawk -F',' '{print $2}' filename.csv",
            language: "bash",
          },
        ],
      },
      {
        id: "system-monitoring",
        title: "System Monitoring",
        icon: "monitor",
        description: "Monitoring system performance and resources",
        snippets: [
          {
            id: "top-command",
            title: "top Command",
            description: "Displaying system processes and resource usage",
            code: "top\ntop -u username",
            language: "bash",
          },
          {
            id: "htop-command",
            title: "htop Command",
            description: "Interactive process viewer",
            code: "htop",
            language: "bash",
          },
        ],
      },
      {
        id: "network-tools",
        title: "Network Tools",
        icon: "network",
        description: "Networking tools in Linux",
        snippets: [
          {
            id: "ping-command",
            title: "ping Command",
            description: "Checking network connectivity",
            code: "ping example.com\nping -c 4 example.com",
            language: "bash",
          },
          {
            id: "netstat-command",
            title: "netstat Command",
            description: "Displaying network connections and statistics",
            code: "netstat -a\nnetstat -tuln",
            language: "bash",
          },
        ],
      },
      {
        id: "package-management",
        title: "Package Management",
        icon: "package",
        description: "Managing software packages in Linux",
        snippets: [
          {
            id: "apt-command",
            title: "apt Command",
            description: "Managing packages with apt",
            code: "sudo apt update\nsudo apt install package_name\nsudo apt remove package_name",
            language: "bash",
          },
          {
            id: "yum-command",
            title: "yum Command",
            description: "Managing packages with yum",
            code: "sudo yum update\nsudo yum install package_name\nsudo yum remove package_name",
            language: "bash",
          },
        ],
      },
      {
        id: "file-permissions",
        title: "File Permissions",
        icon: "permissions",
        description: "Managing file permissions in Linux",
        snippets: [
          {
            id: "chmod-command",
            title: "chmod Command",
            description: "Changing file permissions",
            code: "chmod 755 filename.txt\nchmod +x script.sh",
            language: "bash",
          },
          {
            id: "chown-command",
            title: "chown Command",
            description: "Changing file ownership",
            code: "sudo chown username:groupname filename.txt",
            language: "bash",
          },
        ],
      },
    ],
  },
];
